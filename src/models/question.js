import mongoose from "mongoose";
const Schema = mongoose.Schema;

// Schema for a single question
const QuestionSchema = new Schema({
  type: {
    type: String,
    required: true,
    enum: ['multiple_choice', 'true_false', 'short_answer', 'fill_in_blank']
  },
  question: {
    type: String,
    required: true
  },
  options: {
    type: [String],
    // Only required for multiple_choice questions
    validate: {
      validator: function(options) {
        return this.type !== 'multiple_choice' || (options && options.length > 0);
      },
      message: 'Options are required for multiple choice questions'
    }
  },
  correct_answer: {
    type: String,
    required: true
  }
});

// Schema for a question set
const QuestionSetSchema = new Schema({
  // Unique identifier for the question set
  setId: {
    type: String,
    required: true,
    unique: true
  },
  // Title or topic of the question set
  title: {
    type: String,
    required: true
  },
  // Subject or category
  subject: {
    type: String,
    required: true
  },
  // Difficulty level
  difficulty: {
    type: String,
    enum: ['easy', 'medium', 'hard', 'expert'],
    default: 'medium'
  },
  // The questions in this set
  questions: {
    type: [QuestionSchema],
    required: true,
    validate: {
      validator: function(questions) {
        return questions && questions.length > 0;
      },
      message: 'At least one question is required'
    }
  },
  // Generated by info
  generatedBy: {
    modelName: {
      type: String,
      default: 'DefaultModel'
    },
    modelVersion: {
      type: String,
      default: '1.0'
    },
    generationDate: {
      type: Date,
      default: Date.now
    }
  },
  // Usage tracking
  timesUsed: {
    type: Number,
    default: 0
  },
  // Active status
  isActive: {
    type: Boolean,
    default: true
  },
  // Creation and update timestamps
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Create indexes for common queries
QuestionSetSchema.index({ subject: 1 });
QuestionSetSchema.index({ difficulty: 1 });
QuestionSetSchema.index({ 'generatedBy.modelName': 1 });
QuestionSetSchema.index({ setId: 1 }, { unique: true });

// Create the model
const QuestionSet = mongoose.model('QuestionSet', QuestionSetSchema);

module.exports = QuestionSet;